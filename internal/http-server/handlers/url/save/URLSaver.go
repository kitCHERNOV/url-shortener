// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package save

import (
	"sync"
)

// Ensure, that URLSaverMock does implement URLSaver.
// If this is not the case, regenerate this file with moq.
var _ URLSaver = &URLSaverMock{}

// URLSaverMock is a mock implementation of URLSaver.
//
//	func TestSomethingThatUsesURLSaver(t *testing.T) {
//
//		// make and configure a mocked URLSaver
//		mockedURLSaver := &URLSaverMock{
//			SaveURLFunc: func(urlToSave string, alias string) (int64, error) {
//				panic("mock out the SaveURL method")
//			},
//		}
//
//		// use mockedURLSaver in code that requires URLSaver
//		// and then make assertions.
//
//	}
type URLSaverMock struct {
	// SaveURLFunc mocks the SaveURL method.
	SaveURLFunc func(urlToSave string, alias string) (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// SaveURL holds details about calls to the SaveURL method.
		SaveURL []struct {
			// UrlToSave is the urlToSave argument value.
			UrlToSave string
			// Alias is the alias argument value.
			Alias string
		}
	}
	lockSaveURL sync.RWMutex
}

// SaveURL calls SaveURLFunc.
func (mock *URLSaverMock) SaveURL(urlToSave string, alias string) (int64, error) {
	if mock.SaveURLFunc == nil {
		panic("URLSaverMock.SaveURLFunc: method is nil but URLSaver.SaveURL was just called")
	}
	callInfo := struct {
		UrlToSave string
		Alias     string
	}{
		UrlToSave: urlToSave,
		Alias:     alias,
	}
	mock.lockSaveURL.Lock()
	mock.calls.SaveURL = append(mock.calls.SaveURL, callInfo)
	mock.lockSaveURL.Unlock()
	return mock.SaveURLFunc(urlToSave, alias)
}

// SaveURLCalls gets all the calls that were made to SaveURL.
// Check the length with:
//
//	len(mockedURLSaver.SaveURLCalls())
func (mock *URLSaverMock) SaveURLCalls() []struct {
	UrlToSave string
	Alias     string
} {
	var calls []struct {
		UrlToSave string
		Alias     string
	}
	mock.lockSaveURL.RLock()
	calls = mock.calls.SaveURL
	mock.lockSaveURL.RUnlock()
	return calls
}
